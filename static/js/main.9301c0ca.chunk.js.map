{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","form","children","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","nextProps","nextState","this","props","checked","text","id","onToggle","onRemove","console","log","e","stopPropagation","Component","TodoItemList","todos","todoList","map","key","App","state","input","handleChange","setState","target","handleCreate","concat","handleKeyPress","handleToggle","index","findIndex","todo","selected","nextTodos","handleRemove","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TAmBeA,G,MAhBU,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAC7B,OACI,0BAAMC,UAAU,sBACZ,yBAAKA,UAAU,SAAf,mBAGA,6BAASA,UAAU,gBACdF,GAEL,6BAASE,UAAU,iBACdD,MCCFE,G,MAXF,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WACtC,OACI,yBAAKL,UAAU,QACX,2BAAOE,MAAOA,EAAOC,SAAUA,EAAUE,WAAYA,IACrD,yBAAKL,UAAU,gBAAgBM,QAASF,GAAxC,UCwBGG,G,0LA1BWC,EAAWC,GAC7B,OAAOC,KAAKC,MAAMC,UAAYJ,EAAUI,U,+BAGlC,IAAD,EAC6CF,KAAKC,MAA/CE,EADH,EACGA,KAAMD,EADT,EACSA,QAASE,EADlB,EACkBA,GAAIC,EADtB,EACsBA,SAAUC,EADhC,EACgCA,SAIrC,OAFAC,QAAQC,IAAIJ,GAGR,yBAAKd,UAAY,YAAYM,QAAS,kBAAKS,EAASD,KAChD,yBAAKd,UAAU,SAASM,QAAS,SAACa,GAC9BA,EAAEC,kBACFJ,EAASF,KAFb,QAIA,yBAAKd,UAAS,oBAAeY,GAAW,YACpC,6BAAMC,IAGND,GAAY,yBAAKZ,UAAU,cAAf,e,GArBTqB,cC8BRC,E,oLA5BWd,EAAWC,GAC7B,OAAOC,KAAKC,MAAMY,QAAUf,EAAUe,Q,+BAGhC,IAAD,EACiCb,KAAKC,MAAnCY,EADH,EACGA,MAAOR,EADV,EACUA,SAAUC,EADpB,EACoBA,SAEnBQ,EAAWD,EAAME,KACnB,gBAAEX,EAAF,EAAEA,GAAID,EAAN,EAAMA,KAAMD,EAAZ,EAAYA,QAAZ,OACI,kBAAC,EAAD,CACIE,GAAIA,EACJD,KAAMA,EACND,QAASA,EACTG,SAAUA,EACVC,SAAUA,EACVU,IAAKZ,OAKjB,OACI,6BACKU,O,GAxBUH,aCyFZM,E,4MArFbb,GAAK,E,EAELc,MAAQ,CACNC,MAAO,GACPN,MAAO,CACL,CAACT,GAAI,EAAGD,KAAM,2BAAQD,SAAS,GAC/B,CAACE,GAAI,EAAGD,KAAM,0DAAcD,SAAS,GACrC,CAACE,GAAI,EAAGD,KAAM,8EAAmBD,SAAS,K,EAI9CkB,aAAe,SAACX,GACd,EAAKY,SAAS,CACZF,MAAOV,EAAEa,OAAO9B,S,EAIpB+B,aAAe,WAAO,IAAD,EACM,EAAKL,MAAtBC,EADW,EACXA,MAAON,EADI,EACJA,MACf,EAAKQ,SAAS,CACZF,MAAO,GACPN,MAAOA,EAAMW,OAAO,CAClBpB,GAAI,EAAKA,KACTD,KAAMgB,EACNjB,SAAS,O,EAKfuB,eAAiB,SAAChB,GACH,UAAVA,EAAEO,KACH,EAAKO,gB,EAITG,aAAe,SAACtB,GAAQ,IACfS,EAAS,EAAKK,MAAdL,MAEDc,EAAQd,EAAMe,WAAU,SAAAC,GAAI,OAAIA,EAAKzB,KAAOA,KAC5C0B,EAAWjB,EAAMc,GAEjBI,EAAS,YAAOlB,GAEtBkB,EAAUJ,GAAV,2BACKG,GADL,IAEE5B,SAAU4B,EAAS5B,UAGrB,EAAKmB,SAAS,CACZR,MAAOkB,K,EAIXC,aAAe,SAAC5B,GAAQ,IACdS,EAAU,EAAKK,MAAfL,MACR,EAAKQ,SAAS,CACZR,MAAOA,EAAMoB,QAAO,SAAAJ,GAAI,OAAIA,EAAKzB,KAAOA,Q,uDAIlC,IAAD,EACkBJ,KAAKkB,MAAtBC,EADD,EACCA,MAAON,EADR,EACQA,MAEbO,EAKEpB,KALFoB,aACAG,EAIEvB,KAJFuB,aACAE,EAGEzB,KAHFyB,eACAC,EAEE1B,KAFF0B,aACAM,EACEhC,KADFgC,aAGF,OACE,kBAAC,EAAD,CAAkB5C,KAClB,kBAAC,EAAD,CACEI,MAAO2B,EACPxB,WAAY8B,EACZhC,SAAU2B,EACV1B,SAAU6B,KAGV,kBAAC,EAAD,CAAcV,MAAOA,EAAOR,SAAUqB,EAAcpB,SAAU0B,S,GAjFpDrB,aCOEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.9301c0ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                Today's Working\r\n            </div>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\r\n    return (\r\n        <div className=\"form\">\r\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n            <div className=\"create-button\" onClick={onCreate}>\r\n                ADD\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render() {\r\n        const { text, checked, id, onToggle, onRemove } = this.props;\r\n\r\n        console.log(id);\r\n\r\n        return (\r\n            <div className = \"todo-item\" onClick={()=> onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    onRemove(id)}\r\n                }>&times;</div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n    \r\n    render() {\r\n        const { todos, onToggle, onRemove } = this.props;\r\n\r\n        const todoList = todos.map(\r\n            ({id, text, checked}) => (\r\n                <TodoItem\r\n                    id={id}\r\n                    text={text}\r\n                    checked={checked}\r\n                    onToggle={onToggle}\r\n                    onRemove={onRemove}\r\n                    key={id}\r\n                />\r\n            )\r\n        );\r\n\r\n        return(\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\nclass App extends Component {\n\n  id = 3\n\n  state = {\n    input: '',\n    todos: [\n      {id: 0, text: '기본으로', checked: false},\n      {id: 1, text: '보여지는 부분입니다', checked: true},\n      {id: 2, text: '삭제 가능합니다, 오류안나요', checked: false}\n    ]\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  handleCreate = () => {\n    const { input, todos } = this.state;\n    this.setState({\n      input: '',\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const {todos} = this.state;\n\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n\n    const nextTodos = [...todos];\n\n    nextTodos[index]= {\n      ...selected,\n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  render() {\n    const { input, todos } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n\n    return(\n      <TodoListTemplate form={(\n      <Form\n        value={input}\n        onKeyPress={handleKeyPress}\n        onChange={handleChange}\n        onCreate={handleCreate}\n        />\n      )}>\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}